# ANAGRAM BOOK PUZZLE SOLUTION FORMATTING
# AUTHORS: Alex Varjabedian, Ryan Badi, Shaurya Baranwal

Help := proc(): print("format_puzzles(puzzles) format_solutions(database)"): end:

# Accepts puzzles as a table and produces a string in its presentable format in the puzzle book.
# Puzzles are separated by newline characters.
# Multiple words within a puzzle are separated by spaces.
# Multiple anagrams for the same word are separated by forward slashes.
format_puzzles := proc(puzzles) local ret, puzzle, word, anagram:
  ret := "":
  for puzzle in puzzles do:
    for word in puzzle do:
      for anagram in word do:
        ret := cat(ret, anagram):
        if anagram <> word[-1] then:
          ret := cat(ret, "/"):
        fi:
      od:
      ret := cat(ret, " "):
    od:
    ret := cat(ret, "\n"):
  od:
  return ret:
end:

# Accepts puzzles as a table and produces a string in its presentable format in the puzzle book.
format_solutions := proc(puzzles) local ret, category, puzzle:
  ret := "":
  for puzzle in indices(puzzles) do:
    ret := cat(ret, puzzle[1], "\n"):
  od:
  return ret:
end:

# Generates a large string that contains the entire puzzle book
with(database)
GeneratePDF := proc() local ret, master, Categories, Puzzles, Solutions, i_:
  Categories := ["U.S. STATE CAPITALS", "WORLD CAPITAL CITIES", "FAMOUS MATHEMATICIANS", "FAMOUS ATHLETES", "FAMOUS MUSICIANS", "WORLD LANGUAGES", "ANIMAL SPECIES", "FAMOUS INVENTIONS", "FAMOUS AUTHORS", "SCIENCE FICTION MOVIES", "FAMOUS ARTISTS", "FAMOUS MONUMENTS"]:
  master := [seq(generate_anagrams(i_), i_ = 1 .. nops(database))]:
  Puzzles := [seq(format_puzzles(op(master)[i_]), i_ = 1 .. nops(database))]:
  Solutions := [seq(format_solutions(op(master)[i_]), i_ = 1 .. nops(database))]:
  ret := "":
  for i_ from 1 to nops(database) do:
    ret := cat(ret, "The following are anagrams of ", C[i_], ". Can you find them?\n", P[i_]):
  end do:
  for i_ from 1 to nops(database) do:
    ret := cat(ret, "\nSOLUTIONS\n", C[i_], "\n", S[i_]):
  end do:
  return ret:
end:
