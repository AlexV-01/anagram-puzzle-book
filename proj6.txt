# Anagram Puzzle Book
# AUTHORS: Alex Varjabedian, Ryan Badi, Shaurya Baranwal

read("ENGLISH.txt"):
read("CRYPTOGRAM.txt"):
read("database.txt"):
with(StringTools):
with(Maplets[Examples]):

Help := proc() print("generate_anagrams(game_number)") end:

# List to string converter
ltos := proc(l) local s, i:
  s := "":
  for i from 1 to nops(l) do s := cat(s, l[i]) od:
  return s:
end:

# Converts space-separated words to list of sub-words
wtol := proc(w) local l, s, i:
  l := []:
  s := "":
  for i from 1 to Length(w) do
    if w[i] = " " then
      l := [op(l), s]:
      s := "":
    else
      s := cat(s, w[i]):
    fi:
  od:
  l := [op(l), s]:
  return l:
end:

# ANAGRAM GENERATOR
generate_anagrams := proc(game_number::posint:=0) local eng, i, anagrams, word, input, data, w:
  data := database[if game_number = 0 then rand(1..nops(database))() else game_number fi]:
  for i from 1 to nops(data) do
    eng := {seq(seq(LowerCase(ltos(word)), word in ENG()[Length(w)]), w in wtol(data[i]))} union {seq(LowerCase(w), w in wtol(data[i]))}:
    anagrams[data[i]] := [seq([Anagrams(LowerCase(w), eng)], w in wtol(data[i]))]:
  od:
  return op(anagrams):
end:

print("Choose a game:");
print("1: US state capitals");
print("2: World capital cities");
print("3: Famous mathematicians");
print("4: Famous athletes");
print("5: Famous musicians");
